
//stvaranje tablica po kodu iz dokumentacije

generator client{
    provider = "prisma-client-js"
}
datasource db{
    provider = "mysql"
    url = env("DATABASE_URL")
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bikes Bike[]
  tracks Track[]
  setups Setup[]
  results Result[]
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
model Bike {
  idBike       Int    @id @default(autoincrement())
  bikeName String
  model    String
  modelYear String
  bikeInfo String
  userId   String
  user     User   @relation(fields: [userId], references: [id])

}
model Track{

  idTrack Int   @id @default(autoincrement())
  trackName String 
  trackDescription String
  trackGrade String
  userId    String
  user     User   @relation(fields: [userId], references: [id])

}

model Setup{

  idSetup Int   @id @default(autoincrement())
  setupName String
  frontTyrePressure  String
  forkPressure  String
  hsrf  String
  lsrf  String
  hscf  String
  lscf  String
  tokenNumberf String
  sagf String
  rearTyrePressure  String
  shockPressure  String
  hsrr  String
  lsrr String
  hscr  String
  lscr String
  tokenNumberr String
  sagr String

   userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model Result{

  id Int   @id @default(autoincrement())
  selectedBike String
  selectedTrack String
  selectedSetup String
  trackTime String
  trackConditions String
   userId   String
  user     User   @relation(fields: [userId], references: [id])
}